// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLIENTSCHEMA_CL_H_
#define FLATBUFFERS_GENERATED_CLIENTSCHEMA_CL_H_

#include "flatbuffers/flatbuffers.h"

namespace Cl {

struct Person;
struct PersonBuilder;

struct Group;
struct GroupBuilder;

struct Client;
struct ClientBuilder;

struct Clients;
struct ClientsBuilder;

enum Client_Type {
  Client_Type_NONE = 0,
  Client_Type_Person = 1,
  Client_Type_Group = 2,
  Client_Type_MIN = Client_Type_NONE,
  Client_Type_MAX = Client_Type_Group
};

inline const Client_Type (&EnumValuesClient_Type())[3] {
  static const Client_Type values[] = {
    Client_Type_NONE,
    Client_Type_Person,
    Client_Type_Group
  };
  return values;
}

inline const char * const *EnumNamesClient_Type() {
  static const char * const names[4] = {
    "NONE",
    "Person",
    "Group",
    nullptr
  };
  return names;
}

inline const char *EnumNameClient_Type(Client_Type e) {
  if (flatbuffers::IsOutRange(e, Client_Type_NONE, Client_Type_Group)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesClient_Type()[index];
}

template<typename T> struct Client_TypeTraits {
  static const Client_Type enum_value = Client_Type_NONE;
};

template<> struct Client_TypeTraits<Cl::Person> {
  static const Client_Type enum_value = Client_Type_Person;
};

template<> struct Client_TypeTraits<Cl::Group> {
  static const Client_Type enum_value = Client_Type_Group;
};

bool VerifyClient_Type(flatbuffers::Verifier &verifier, const void *obj, Client_Type type);
bool VerifyClient_TypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Person FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PersonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AGE = 4,
    VT_WEIGHT = 6,
    VT_GENDER = 8
  };
  uint16_t age() const {
    return GetField<uint16_t>(VT_AGE, 0);
  }
  float weight() const {
    return GetField<float>(VT_WEIGHT, 0.0f);
  }
  const flatbuffers::String *gender() const {
    return GetPointer<const flatbuffers::String *>(VT_GENDER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_AGE, 2) &&
           VerifyField<float>(verifier, VT_WEIGHT, 2) &&
           VerifyOffset(verifier, VT_GENDER) &&
           verifier.VerifyString(gender()) &&
           verifier.EndTable();
  }
};

struct PersonBuilder {
  typedef Person Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_age(uint16_t age) {
    fbb_.AddElement<uint16_t>(Person::VT_AGE, age, 0);
  }
  void add_weight(float weight) {
    fbb_.AddElement<float>(Person::VT_WEIGHT, weight, 0.0f);
  }
  void add_gender(flatbuffers::Offset<flatbuffers::String> gender) {
    fbb_.AddOffset(Person::VT_GENDER, gender);
  }
  explicit PersonBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Person>(end);
    return o;
  }
};

inline flatbuffers::Offset<Person> CreatePerson(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t age = 0,
    float weight = 0.0f,
    flatbuffers::Offset<flatbuffers::String> gender = 0) {
  PersonBuilder builder_(_fbb);
  builder_.add_gender(gender);
  builder_.add_weight(weight);
  builder_.add_age(age);
  return builder_.Finish();
}

inline flatbuffers::Offset<Person> CreatePersonDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t age = 0,
    float weight = 0.0f,
    const char *gender = nullptr) {
  auto gender__ = gender ? _fbb.CreateString(gender) : 0;
  return Cl::CreatePerson(
      _fbb,
      age,
      weight,
      gender__);
}

struct Group FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AGE = 4,
    VT_WEIGHT = 6,
    VT_LIST_NAMES = 8
  };
  float age() const {
    return GetField<float>(VT_AGE, 0.0f);
  }
  float weight() const {
    return GetField<float>(VT_WEIGHT, 0.0f);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *list_names() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_LIST_NAMES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_AGE, 2) &&
           VerifyField<float>(verifier, VT_WEIGHT, 2) &&
           VerifyOffset(verifier, VT_LIST_NAMES) &&
           verifier.VerifyVector(list_names()) &&
           verifier.VerifyVectorOfStrings(list_names()) &&
           verifier.EndTable();
  }
};

struct GroupBuilder {
  typedef Group Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_age(float age) {
    fbb_.AddElement<float>(Group::VT_AGE, age, 0.0f);
  }
  void add_weight(float weight) {
    fbb_.AddElement<float>(Group::VT_WEIGHT, weight, 0.0f);
  }
  void add_list_names(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> list_names) {
    fbb_.AddOffset(Group::VT_LIST_NAMES, list_names);
  }
  explicit GroupBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Group> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Group>(end);
    return o;
  }
};

inline flatbuffers::Offset<Group> CreateGroup(
    flatbuffers::FlatBufferBuilder &_fbb,
    float age = 0.0f,
    float weight = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> list_names = 0) {
  GroupBuilder builder_(_fbb);
  builder_.add_list_names(list_names);
  builder_.add_weight(weight);
  builder_.add_age(age);
  return builder_.Finish();
}

inline flatbuffers::Offset<Group> CreateGroupDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    float age = 0.0f,
    float weight = 0.0f,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *list_names = nullptr) {
  auto list_names__ = list_names ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*list_names) : 0;
  return Cl::CreateGroup(
      _fbb,
      age,
      weight,
      list_names__);
}

struct Client FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClientBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_BASE_TYPE = 6,
    VT_BASE = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const Client *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(name()->c_str(), val);
  }
  Cl::Client_Type base_type() const {
    return static_cast<Cl::Client_Type>(GetField<uint8_t>(VT_BASE_TYPE, 0));
  }
  const void *base() const {
    return GetPointer<const void *>(VT_BASE);
  }
  template<typename T> const T *base_as() const;
  const Cl::Person *base_as_Person() const {
    return base_type() == Cl::Client_Type_Person ? static_cast<const Cl::Person *>(base()) : nullptr;
  }
  const Cl::Group *base_as_Group() const {
    return base_type() == Cl::Client_Type_Group ? static_cast<const Cl::Group *>(base()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_BASE_TYPE, 1) &&
           VerifyOffset(verifier, VT_BASE) &&
           VerifyClient_Type(verifier, base(), base_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Cl::Person *Client::base_as<Cl::Person>() const {
  return base_as_Person();
}

template<> inline const Cl::Group *Client::base_as<Cl::Group>() const {
  return base_as_Group();
}

struct ClientBuilder {
  typedef Client Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Client::VT_NAME, name);
  }
  void add_base_type(Cl::Client_Type base_type) {
    fbb_.AddElement<uint8_t>(Client::VT_BASE_TYPE, static_cast<uint8_t>(base_type), 0);
  }
  void add_base(flatbuffers::Offset<void> base) {
    fbb_.AddOffset(Client::VT_BASE, base);
  }
  explicit ClientBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Client> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Client>(end);
    fbb_.Required(o, Client::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<Client> CreateClient(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    Cl::Client_Type base_type = Cl::Client_Type_NONE,
    flatbuffers::Offset<void> base = 0) {
  ClientBuilder builder_(_fbb);
  builder_.add_base(base);
  builder_.add_name(name);
  builder_.add_base_type(base_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Client> CreateClientDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    Cl::Client_Type base_type = Cl::Client_Type_NONE,
    flatbuffers::Offset<void> base = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Cl::CreateClient(
      _fbb,
      name__,
      base_type,
      base);
}

struct Clients FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClientsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Cl::Client>> *clients() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Cl::Client>> *>(VT_CLIENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLIENTS) &&
           verifier.VerifyVector(clients()) &&
           verifier.VerifyVectorOfTables(clients()) &&
           verifier.EndTable();
  }
};

struct ClientsBuilder {
  typedef Clients Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_clients(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Cl::Client>>> clients) {
    fbb_.AddOffset(Clients::VT_CLIENTS, clients);
  }
  explicit ClientsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Clients> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Clients>(end);
    return o;
  }
};

inline flatbuffers::Offset<Clients> CreateClients(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Cl::Client>>> clients = 0) {
  ClientsBuilder builder_(_fbb);
  builder_.add_clients(clients);
  return builder_.Finish();
}

inline flatbuffers::Offset<Clients> CreateClientsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<flatbuffers::Offset<Cl::Client>> *clients = nullptr) {
  auto clients__ = clients ? _fbb.CreateVectorOfSortedTables<Cl::Client>(clients) : 0;
  return Cl::CreateClients(
      _fbb,
      clients__);
}

inline bool VerifyClient_Type(flatbuffers::Verifier &verifier, const void *obj, Client_Type type) {
  switch (type) {
    case Client_Type_NONE: {
      return true;
    }
    case Client_Type_Person: {
      auto ptr = reinterpret_cast<const Cl::Person *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Client_Type_Group: {
      auto ptr = reinterpret_cast<const Cl::Group *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyClient_TypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyClient_Type(
        verifier,  values->Get(i), types->GetEnum<Client_Type>(i))) {
      return false;
    }
  }
  return true;
}

inline const Cl::Clients *GetClients(const void *buf) {
  return flatbuffers::GetRoot<Cl::Clients>(buf);
}

inline const Cl::Clients *GetSizePrefixedClients(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Cl::Clients>(buf);
}

inline bool VerifyClientsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Cl::Clients>(nullptr);
}

inline bool VerifySizePrefixedClientsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Cl::Clients>(nullptr);
}

inline void FinishClientsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Cl::Clients> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedClientsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Cl::Clients> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Cl

#endif  // FLATBUFFERS_GENERATED_CLIENTSCHEMA_CL_H_
